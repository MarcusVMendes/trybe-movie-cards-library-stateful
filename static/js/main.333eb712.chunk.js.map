{"version":3,"sources":["components/Header.jsx","data.js","components/subcomponents/InputRating.jsx","components/subcomponents/Title.jsx","components/subcomponents/Subtitle.jsx","components/subcomponents/Storyline.jsx","components/subcomponents/Image.jsx","components/subcomponents/Genre.jsx","components/subcomponents/Button.jsx","components/AddMovie.jsx","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/MovieLibrary.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","movies","title","subtitle","storyline","rating","imagePath","bookmarked","genre","InputRating","this","props","onChange","htmlFor","data-testid","id","name","type","value","Title","Subtitle","Storyline","Image","Genre","Button","onClick","console","log","AddMovie","handleChange","event","setState","target","handleClick","preventDefault","state","SearchBar","onSearchTextChange","onBookmarkedChange","onSelectedGenreChange","searchText","bookmarkedOnly","selectedGenre","action","checked","Rating","defaultProps","MovieCard","movie","alt","src","MovieList","map","key","MovieLibrary","addNewMovie","handleChanges","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.333eb712.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputRating extends React.Component {\n  render() {\n    const { onChange, rating } = this.props;\n    return (\n      <label htmlFor=\"Input rating\" data-testid=\"rating-input-label\">\n        Avaliação\n        <input\n          data-testid=\"rating-input\"\n          id=\"Input rating\"\n          name=\"rating\"\n          onChange={ onChange }\n          type=\"number\"\n          value={ rating }\n        />\n      </label>\n    );\n  }\n}\n\nInputRating.propTypes = {\n  rating: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InputRating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Title extends React.Component {\n  render() {\n    const { title, onChange } = this.props;\n    return (\n      <label htmlFor=\"Input title\" data-testid=\"title-input-label\">\n        Título\n        <input\n          value={ title }\n          type=\"text\"\n          name=\"title\"\n          id=\"Input title\"\n          data-testid=\"title-input\"\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Subtitle extends React.Component {\n  render() {\n    const { subtitle, onChange } = this.props;\n    return (\n      <label htmlFor=\"Input subtitle\" data-testid=\"subtitle-input-label\">\n        Subtítulo\n        <input\n          data-testid=\"subtitle-input\"\n          id=\"Input subtitle\"\n          name=\"subtitle\"\n          onChange={ onChange }\n          type=\"text\"\n          value={ subtitle }\n        />\n      </label>\n    );\n  }\n}\n\nSubtitle.propTypes = {\n  subtitle: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Subtitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Storyline extends React.Component {\n  render() {\n    const { onChange, storyline } = this.props;\n    return (\n      <label htmlFor=\"Input storyline\" data-testid=\"storyline-input-label\">\n        Sinopse\n        <input\n          data-testid=\"storyline-input\"\n          id=\"Input storyline\"\n          name=\"storyline\"\n          onChange={ onChange }\n          type=\"textarea\"\n          value={ storyline }\n        />\n      </label>\n    );\n  }\n}\n\nStoryline.propTypes = {\n  storyline: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Storyline;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Image extends React.Component {\n  render() {\n    const { imagePath, onChange } = this.props;\n    return (\n      <label htmlFor=\"Input image\" data-testid=\"image-input-label\">\n        Imagem\n        <input\n          data-testid=\"image-input\"\n          id=\"Input image\"\n          onChange={ onChange }\n          name=\"imagePath\"\n          type=\"text\"\n          value={ imagePath }\n        />\n      </label>\n    );\n  }\n}\n\nImage.propTypes = {\n  imagePath: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Image;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Genre extends React.Component {\n  render() {\n    const { genre, onChange } = this.props;\n    return (\n      <label htmlFor=\"input-select-genre\" data-testid=\"genre-input-label\">\n        Gênero\n        <select\n          data-testid=\"genre-input\"\n          id=\"input-select-genre\"\n          name=\"genre\"\n          onChange={ onChange }\n          value={ genre }\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nGenre.propTypes = {\n  genre: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Genre;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Button extends React.Component {\n  render() {\n    const { onClick } = this.props;\n    console.log(onClick);\n    return (\n      <button type=\"submit\" data-testid=\"send-button\" onClick={ onClick }>\n        Adicionar filme\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputRating from './subcomponents/InputRating';\nimport Title from './subcomponents/Title';\nimport Subtitle from './subcomponents/Subtitle';\nimport Storyline from './subcomponents/Storyline';\nimport Image from './subcomponents/Image';\nimport Genre from './subcomponents/Genre';\nimport Button from './subcomponents/Button';\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState({\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  };\n\n  render() {\n    const { title, subtitle, imagePath, storyline, rating, genre } = this.state;\n    return (\n      <div>\n        <form data-testid=\"add-movie-form\">\n          <Title title={ title } onChange={ this.handleChange } />\n          <Subtitle subtitle={ subtitle } onChange={ this.handleChange } />\n          <Image imagePath={ imagePath } onChange={ this.handleChange } />\n          <Storyline storyline={ storyline } onChange={ this.handleChange } />\n          <InputRating rating={ rating } onChange={ this.handleChange } />\n          <Genre genre={ genre } onChange={ this.handleChange } />\n          <Button onClick={ this.handleClick } />\n        </form>\n      </div>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    const { onSearchTextChange, onBookmarkedChange, onSelectedGenreChange } = this.props;\n    const { searchText, bookmarkedOnly, selectedGenre } = this.props;\n    return (\n      <div>\n        <form data-testid=\"search-bar-form\" action=\"\">\n          <label htmlFor=\"Inclui o texto\" data-testid=\"text-input-label\">\n            Inclui o texto:\n            <input\n              data-testid=\"text-input\"\n              id=\"Inclui o texto\"\n              name=\"searchText\"\n              onChange={ onSearchTextChange }\n              type=\"text\"\n              value={ searchText }\n            />\n          </label>\n          <label htmlFor=\"filter-checkbox\" data-testid=\"checkbox-input-label\">\n            Mostrar somente favoritos\n            <input\n              checked={ bookmarkedOnly }\n              data-testid=\"checkbox-input\"\n              id=\"filter-checkbox\"\n              name=\"bookmarkedOnly\"\n              onChange={ onBookmarkedChange }\n              type=\"checkbox\"\n            />\n          </label>\n          <label htmlFor=\"input-select-genre\" data-testid=\"select-input-label\">\n            Filtrar por gênero\n            <select\n              data-testid=\"select-input\"\n              id=\"input-select-genre\"\n              onChange={ onSelectedGenreChange }\n              name=\"selectedGenre\"\n              value={ selectedGenre }\n            >\n              <option value=\"\" data-testid=\"select-option\">Todos</option>\n              <option value=\"action\" data-testid=\"select-option\">Ação</option>\n              <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n              <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n            </select>\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.string.isRequired,\n  onBookmarkedChange: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.string.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number };\n\nRating.defaultProps = {\n  rating: 'undefined',\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AddMovie from './AddMovie';\nimport SearchBar from './SearchBar';\nimport MovieList from './MovieList';\n\nclass MovieLibrary extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n    };\n  }\n\n  addNewMovie = (movie) => {\n    const { movies } = this.state;\n    this.setState({\n      movies: [...movies, movie],\n    });\n  }\n\n  handleChanges = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\n    const { movies } = this.props;\n    console.log('search', searchText, 'book', bookmarkedOnly, 'select', selectedGenre);\n    return (\n      <div>\n        <SearchBar\n          searchText={ searchText }\n          bookmarkedOnly={ bookmarkedOnly }\n          selectedGenre={ selectedGenre }\n          onSearchTextChange={ this.handleChanges }\n          onBookmarkedChange={ this.handleChanges }\n          onSelectedGenreChange={ this.handleChanges }\n        />\n        <MovieList movies={ movies } />\n        <AddMovie onClick={ this.addNewMovie } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n  })).isRequired,\n};\n\nexport default MovieLibrary;\n","import React from 'react';\nimport Header from './components/Header';\nimport './App.css';\nimport movies from './data';\nimport MovieLibrary from './components/MovieLibrary';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}